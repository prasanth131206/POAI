import heapq

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    open_set = [(heuristic(start, goal), 0, start)]
    came_from = {}
    g_score = {start: 0}
    dirs = [(0, 1), (1, 0), (-1, 0), (0, -1)]

    while open_set:
        _, cost, curr = heapq.heappop(open_set)
        if curr == goal:
            path = []
            while curr in came_from:
                path.append(curr)
                curr = came_from[curr]
            return [start] + path[::-1]

        for dx, dy in dirs:
            nei = (curr[0] + dx, curr[1] + dy)
            if 0 <= nei[0] < rows and 0 <= nei[1] < cols and grid[nei[0]][nei[1]] == 0:
                tentative = g_score[curr] + 1
                if nei not in g_score or tentative < g_score[nei]:
                    came_from[nei] = curr
                    g_score[nei] = tentative
                    heapq.heappush(open_set, (tentative + heuristic(nei, goal), tentative, nei))
    return None

grid = [
    [0, 0, 0, 0],
    [1, 1, 0, 1],
    [0, 0, 0, 0],
    [0, 1, 1, 0]
]

path = astar(grid, (0, 0), (3, 3))

if path:
    print("Path found:")
    for p in path: print(p)
else:
    print("No path found.")
